package openbook.filesystem.messages;


// ----------------------------------------------------------------------------
//                  Client Registration with Server
// ----------------------------------------------------------------------------


// sent by the client to start the authentication handshake
message Registration_RequestA {
    optional int32  req_id      = 1;    // client specific request id
}

// sent by the server in response to RequestPublicKey
message Registration_ReplyA {
    optional int32  req_id      = 1;    // the request to which the server is
                                        // responding
    optional string public_key  = 2;    // public key for encrypting password
    optional string salt        = 3;    // adds some taste to the password
}

// sent by the client to request registration as an authenticated client, 
// the message is generated by the user entering a password
message Registration_RequestB {
    optional int32  req_id      = 1;    // client specific request id
    optional string hased_pw    = 2;    // hashed salted password
    optional string public_key  = 3;    // client's public key, to store for
                                        // later authentication
}

// sent by the server in response to a registration request indicating 
// registration success or failure
message Registration_ReplyB {
    optional int32  req_id      = 1;    // the request to which the server is
                                        // responding
    optional bool   response    = 2;    // whether the registration was accepted
                                        // or not
    optional int32  reg_id      = 3;    // identifier for the registration 
}





// ----------------------------------------------------------------------------
//             Registered Client Authentication with Server
// ----------------------------------------------------------------------------

// sent by the client to authenticate
message Authentication_RequestA {
    optional int32 req_id   = 1;    // client specific request id
    optional int32 reg_id   = 2;    // the registration number of the client
}

// challenge sent by the server
message Authentication_ReplyA {
    optional int32  req_id   = 1;    // request to which server is responding
    optional string challenge= 2;    // encrypted phrase
}

// response to challenge sent by the client
message Authentication_RequestB {
    optional int32  req_id   = 1;   // client specific request id
    optional string challenge= 2;   // de-en crypted challenge phrase
}

// response of server to clients authentication request
message Authentication_ReplyB {
    optional int32  req_id   = 1;   // request to which server is responding
    optional bool   response = 2;   // whether the client is authenticated or
                                    // not
}




// ----------------------------------------------------------------------------
//                      File System Notifications
// ----------------------------------------------------------------------------

// sent by client when a new files is created
message Create {
    optional int32   req_id = 1;    // client specific request id
    optional int64   time   = 2;    // creation time of the file
    optional string  path   = 3;    // path of the file (including file name)
}

// sent by client when a file should be removed from the server
message Delete {
    optional int32   req_id = 1;    // client specific request id
    optional int64   time   = 2;    // creation time of the file
    optional string  path   = 3;    // path of the file (including file name)
}


// sent when a subscription is created
message Subscribe {
    optional int32   req_id     = 1;    // client specific request id
    optional int32   client_id  = 2;    // which client get's the subscription
    optional string  path       = 3;    // path to the file
}

// sent when a subscription is deleted
message Unsubscribe {
    optional int32   req_id     = 1;    // client specific request id
    optional int32   client_id  = 2;    // which client get's the subscription
    optional string  path       = 3;    // path to the file
}

// sent when a client wants to upload a new version
message RequestUpload {
    optional int32   req_id     = 1;    // client specific request id
    optional int32   version    = 2;    // previous file version
    optional int32   path       = 3;    // path of the file
}

// sent by server when it grants an upload request
message GrantUpload {
    enum Status
    {
        GRANTED  = 0;    // ditto
        CONFLICT = 1;    // some is writing or has written a new version 
                         // already
    }

    optional int32   req_id     = 1;    // request to which the server is 
                                        // responding
    optional Status  status     = 2;    // whether or not it was granted
    optional int32   up_id      = 3;    // numeric identifier for this
                                        // transaction
    optional int32   stage_file = 4;    // path of the file where client may
                                        // scp to
}

// sent by the client when an upload is complete
message UploadComplete {
    optional int32   req_id     = 1;    // client specific request id
    optional int32   up_id      = 2;    // numeric identifier for this
                                        // transaction
}

// sent when a client wants to download a new version
message RequestDownload {
    optional int32   req_id     = 1;    // client specific request id
    optional int32   path       = 2;    // path of the file
}

// sent by the server when it grants a client download priviledges (locks file)
message GrantDownload {
    enum Status 
    {
        GRANTED = 0;    // ditto
        LOCKED  = 1;    // someone is writing a new version
    }

    optional int32   req_id     = 1;    // client specific request id
    optional Status  status     = 2;    // whether or not download was granted
    optional int32   down_id    = 3;    // numeric identifier for this 
                                        // transaction
}

// sent by the client whan a download is complete (unlocks the file)
message DownloadComplete {
    optional int32   req_id     = 1;    // client specific request id
    optional int32   down_id    = 2;    // numeric identifier for this 
                                        // transaction
}


// sent by the server to all subscribed clients when a file changes version
message NewVersion {
    optional int32  req_id      = 1;    // server specific request_id
    optional int32  version     = 2;    // version number of the file
    optional string path        = 3;    // path of the file 
}



