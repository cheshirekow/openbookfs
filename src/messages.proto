package openbook.filesystem.messages;



// ----------------------------------------------------------------------------
//             Virtual messages, aren't ever really used
// ----------------------------------------------------------------------------

/// signals a thread to quit
message Quit {
    optional int32  dummy = 1;  // no meaning
}

/// something is wrong
message Invalid {
    optional int32  dummy = 1;  // no meaning
}




// ----------------------------------------------------------------------------
//             User Interface Messages
// ----------------------------------------------------------------------------
// These correspond to public methods of the Backend class

// set the human readable replica name
message SetDisplayName {
    optional string displayName = 1;
}

// change the data storage location
message SetDataDir {
    optional string dataDir = 1;
}

// change the local socket port number
message SetLocalSocket {
    optional int32 port = 1;
}

// change the remote socket interface to listen for client connections
message SetRemoteSocket {
    optional int32  addressFamily = 1;  //< AF_INET, AF_INET6, AF_UNIX
    optional string node          = 2;  //< ip address / hostname
    optional string service       = 3;  //< service / port number
}

// change the socket we use when connecting to peers
message SetClientSocket {
    optional int32  addressFamily = 1;  //< AF_INET, AF_INET6, AF_UNIX
    optional string node          = 2;  //< ip address / hostname
}
   
// set the size of the connection pool
message SetMaxConnections {
    optional int32  maxConn = 1;
}

// load a configuration file
message LoadConfig {
    optional string filename = 1;
}

// save configuration to file
message SaveConfig {
    optional string filename = 1;
}

// attempt a connection to a peer
message AttemptConnection {
    optional bool   isRemote    = 1;    //< set to false if the remote 
                                        //  interface is on the same host
    optional string node        = 2;    //< ip address / hostname
    optional string service     = 3;    //< port number / service name
}

// add a mount point 
message AddMountPoint {
    optional string  relpath = 1;   //< relative path in logical fs
    optional string  path    = 2;   //< the path of the mount point
    repeated string  argv    = 3;   //< arguments for fuse
}

// remove a mount point
message RemoveMountPoint {
    optional int32  imp     = 1;    //< index of mountpoint array to remove
}

// response to UI Events
message UserInterfaceReply {
    optional bool   ok    = 1;  //< message was received and acted on
    optional string msg   = 2;  //< message to display to user
}


// ----------------------------------------------------------------------------
//             Registered Client Authentication with Server
// ----------------------------------------------------------------------------

// Peers generate random numbers break symmetry, only one gets to generates 
// the content encryption key
message LeaderElect {
    optional int32  number  = 1;    // randomly generated integer
}

// Diffie-Hellman parametrs
message DiffieHellmanParams {
    optional bytes p = 1;
    optional bytes g = 2;
    optional bytes q = 3; 
}

// Diffie-Hellman key exchange
message KeyExchange {
    optional bytes sKey = 1;   // static public key
    optional bytes eKey = 2;   // ephemeral public key
}

// Content Encryption Key
message ContentKey
{
    optional bytes key  = 1;     // the content encryption key
    optional bytes iv   = 2;     // initial vector
    optional bytes cmac = 3;     // message authentication digest
}


// sent by the client to authenticate
message AuthRequest {
    optional bytes  public_key   = 1; // client's public key
    optional string display_name = 2; // client's display name
}

// challenge sent by the server 
message AuthChallenge {
    enum Type
    {
        AUTHENTICATE = 1;  // sent if public key is trusted, verify owner
        AUTHORIZE    = 2;  // sent if public key is not yet trusted
    }

    optional Type   type        = 1;    // challenge type
    optional bytes  challenge   = 2;    // authentication: challenge phrase
                                        // authorization:  password salt
}

// response to a challenge sent by the client
message AuthSolution {
    optional bytes  solution = 1;   // authentication: crypt-cycled phrase
                                    // authorization:  salted hashed crypted pw
}

// response of server to clients authentication request
message AuthResult {
    optional bool   response = 1;   // whether the client is authenticated or
                                    // not
}


// job finished ack
message JobFinished {
    optional int32  job_id =1;  // id of the job that was finished
}



// ----------------------------------------------------------------------------
//                      Some testing fun
// ----------------------------------------------------------------------------

message Ping {
    optional int32 payload = 1;
}

message Pong {
    optional int32 payload = 1;
}




// ----------------------------------------------------------------------------
//                      File System Notifications and Jobs
// ----------------------------------------------------------------------------

// sent by a client when it subscribes to a path
message Subscribe {
    optional int64  msg_id  =1;     // message identifier
    optional string path    =2;     // the path to subscribe to
}

// sent by a client when it unsubscribes to a path
message Unsubscribe {
    optional int64  msg_id  =1;     // message identifier
    optional string path    =2;     // the path to unsubscribe from
}

// one entry in a version vector
message VersionEntry {
    optional string client  = 1; // base64 encoded public key
    optional int64  version = 2; // version number
}

// a version vector
message VersionVector {
    repeated VersionEntry version = 1;
}

// sent by a client to other subscribed clients when a file is updated
message NewVersion {
    optional int64          msg_id      = 1;    // message identifier
    optional string         path        = 2;    // path of the file 
    optional VersionVector  version     = 3;    // version vector
}

// Sent by one client to another when it wishes to receive a copy of 
// the file
message RequestFile {
    optional int64          msg_id      = 1;    // message id
    optional int64          req_id      = 2;    // recipient transaction id
    optional string         path        = 3;    // path of the file
    optional int64          offset      = 4;    // first byte/entry to send 
    optional VersionVector  version     = 5;    // version requested
}

// First message sent in preparation of a file transfer
message FileInfo {
    optional int64  msg_id          = 1;    // message id
    optional int64  req_id          = 2;    // recipient transaction id
    optional int64  size            = 3;    // size of the file
    optional int64  ctime           = 4;    // creation time
    optional int64  mtime           = 5;    // modification time
}

// Message containing  chunk of a file
message FileChunk {
    optional int64  msg_id          = 1;    // message id 
    optional int64  req_id          = 2;    // recipient transaction id
    optional int64  offset          = 3;    // offset of chunk
    optional bytes  data            = 4;    // actual data chunk
}
 

 
// types of files
enum NodeType {
    REGULAR   = 0;    // regular file
    DIRECTORY = 1;    // subdirectory
    SIMLINK   = 2;    // simlink
}
 
// one entry of a directory
message DirEntry {
    optional string     path    = 1;    // path name of child
    optional NodeType   type    = 2;    // type of child
    optional int64      size    = 3;    // size if a file
    optional int64      ctime   = 4;    // creation time
    optional int64      mtime   = 5;    // modification time
}

// info a bout a directory
message DirInfo {
    optional int64  msg_id  = 1; // message id
    optional int64  req_id  = 2; // recipient transaction id
    optional int64  size    = 3; // number of entries
    optional int64  ctime   = 4; // creation time
    optional int64  mtime   = 5; // modification time
}

// Message containing a chunk of a directory
message DirChunk {
    optional int64      msg_id  = 1; // message id
    optional int64      req_id  = 2; // recipient transaction id
    optional int64      offset  = 3; // row number of first row in this message
    repeated DirEntry   entries = 4; // actual entries
}





