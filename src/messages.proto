package openbook.filesystem.messages;





// ----------------------------------------------------------------------------
//             Registered Client Authentication with Server
// ----------------------------------------------------------------------------

// Diffie-Hellman parametrs
message DiffieHellmanParams {
    optional bytes p = 1;
    optional bytes g = 2;
    optional bytes q = 3; 
}

// Diffie-Hellman key exchange
message KeyExchange {
    optional bytes sKey = 1;   // static public key
    optional bytes eKey = 2;   // ephemeral public key
}

// Content Encryption Key
message ContentKey
{
    optional bytes key  = 1;     // the content encryption key
    optional bytes iv   = 2;     // initial vector
    optional bytes cmac = 3;     // message authentication digest
}


// sent by the client to authenticate
message AuthRequest {
    optional bytes  public_key   = 1; // client's public key
    optional string display_name = 2; // client's display name
}

// challenge sent by the server 
message AuthChallenge {
    enum Type
    {
        AUTHENTICATE = 1;  // sent if public key is trusted, verify owner
        AUTHORIZE    = 2;  // sent if public key is not yet trusted
    }

    optional Type   type        = 1;    // challenge type
    optional bytes  challenge   = 2;    // authentication: challenge phrase
                                        // authorization:  password salt
}

// response to a challenge sent by the client
message AuthSolution {
    optional bytes  solution = 1;   // authentication: crypt-cycled phrase
                                    // authorization:  salted hashed crypted pw
}

// response of server to clients authentication request
message AuthResult {
    optional bool   response = 1;   // whether the client is authenticated or
                                    // not
}


// job finished ack
message JobFinished {
    optional int32  job_id =1;  // id of the job that was finished
}



// ----------------------------------------------------------------------------
//                      Some testing fun
// ----------------------------------------------------------------------------

message Ping {
    optional int32 payload = 1;
}

message Pong {
    optional int32 payload = 1;
}




// ----------------------------------------------------------------------------
//                      File System Notifications and Jobs
// ----------------------------------------------------------------------------

// sent by the client when the user writes to a file on the file system or by
// the server when it finishes downloading a new version
message NewVersion {
    optional int32  job_id         = 1;    // server specific request_id
    optional int32  base_version   = 2;    // official version of original file
    optional int32  client_version = 3;    // number of client changes
    optional int64  size           = 4;    // file size
    optional string path           = 5;    // path of the file 
}

// Sent by the client or server requesting a chunk of data from the specified
// file. This message is always acked.
message RequestChunk {
    optional int32  msg_id          = 1;    // message id for acking
    optional int32  base_version    = 2;    // used to verify file is ok
    optional int32  client_version  = 3;    // used to verify file is ok
    optional int64  offset          = 4;    // offset of chunk
    optional int64  size            = 5;    // size of chunk
    optional string path            = 6;    // path of the file
}

// Message containinga  chunk of a file
message FileChunk {
    optional int32  msg_id          = 1;    // message id of response
    optional int32  base_version    = 2;    // used to verify file is ok
    optional int32  client_version  = 3;    // used to verify file is ok
    optional int64  offset          = 4;    // offset of chunk
    optional string path            = 5;    // path of the file
    optional bytes  data            = 6;    // actual data chunk
}
 
// Sent by the server after a download telling a client that his version
// is now official
message Commit {
    optional int32  msg_id           = 1; // message id for acking
    optional int32  base_version     = 2; // old base version
    optional int32  client_version   = 3; // version committed
    optional int32  new_version      = 4; // new base version
    optional string path             = 5; // the file committed
}



// acknowledges a job completion
message JobComplete {
    optional int32   job_id = 1;    
}




// sent when a subscription is created
message Subscribe {
    optional int32   job_id     = 1;    // client specific request id
    optional int32   client_id  = 2;    // which client get's the subscription
    optional string  path       = 3;    // path to the file
}

// sent when a subscription is removed
message Unsubscribe {
    optional int32   job_id     = 1;    // client specific request id
    optional int32   client_id  = 2;    // which client get's the subscription
    optional string  path       = 3;    // path to the file
}





